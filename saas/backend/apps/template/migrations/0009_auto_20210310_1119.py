# -*- coding: utf-8 -*-
"""
TencentBlueKing is pleased to support the open source community by making 蓝鲸智云-权限中心(BlueKing-IAM) available.
Copyright (C) 2017-2021 THL A29 Limited, a Tencent company. All rights reserved.
Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://opensource.org/licenses/MIT
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
"""
# Generated by Django 2.2.14 on 2021-03-10 03:19

import json

from django.core.paginator import Paginator
from django.db import migrations, models


def json_dumps(data) -> str:
    return json.dumps(data, separators=(",", ":"))


class OldPermTemplate(models.Model):
    """
    权限模板
    """

    name = models.CharField("模板名称", max_length=128)
    version = models.IntegerField("版本", default=1)
    system_id = models.CharField("系统ID", max_length=32)
    description = models.CharField("描述", max_length=255, default="")
    subject_count = models.IntegerField("授权对象数量", default=0)
    _action_ids = models.TextField("操作列表", db_column="action_ids", default="[]")

    @property
    def action_ids(self):
        return json.loads(self._action_ids)

    @action_ids.setter
    def action_ids(self, data):
        self._action_ids = json_dumps(data)

    class Meta:
        verbose_name = "权限模板"
        verbose_name_plural = "权限模板"
        db_table = "template_permtemplate"
        managed = False


class OldPermTemplatePolicy(models.Model):
    """
    权限模板策略
    """

    template_id = models.IntegerField("模板ID")
    version = models.SmallIntegerField("版本", default=1)
    _data = models.TextField("申请数据", db_column="data")

    class Meta:
        verbose_name = "权限模板策略"
        verbose_name_plural = "权限模板策略"
        db_table = "template_permtemplatepolicy"
        managed = False

    @property
    def data(self):
        return json.loads(self._data)

    @data.setter
    def data(self, data):
        self._data = json_dumps(data)


class OldPermTemplatePolicyAuthorized(models.Model):
    """
    权限模板授权
    """

    template_id = models.IntegerField("模板ID")
    version = models.SmallIntegerField("版本", default=1)
    subject_type = models.CharField("授权对象类型", max_length=32)
    subject_id = models.CharField("授权对象ID", max_length=64)
    system_id = models.CharField("系统ID", max_length=32)
    expired_at = models.BigIntegerField("过期时间戳", default=0)
    _data = models.TextField("授权数据", db_column="data", default="{}")

    @property
    def data(self):
        return json.loads(self._data)

    @data.setter
    def data(self, data):
        self._data = json_dumps(data)

    class Meta:
        verbose_name = "权限模板授权"
        verbose_name_plural = "权限模板授权"
        db_table = "template_permtemplatepolicyauthorized"
        managed = False


def migrate_old_templates(apps, schema_editor):
    queryset = OldPermTemplate.objects.order_by("id")
    paginator = Paginator(queryset, 100)

    if not paginator.count:
        return

    for i in paginator.page_range:
        for template in paginator.page(i):

            template_id = template.id
            policy = OldPermTemplatePolicy.objects.filter(template_id=template_id, version=template.version).get()
            action_ids = [action["id"] for action in policy.data["actions"]]
            template.action_ids = action_ids

            authorized_templates = OldPermTemplatePolicyAuthorized.objects.filter(template_id=template_id)
            template.subject_count = authorized_templates.count()
            template.save(update_fields=["_action_ids", "subject_count"])

            for auth_template in authorized_templates:
                # 校验
                if auth_template.version != template.version:
                    raise Exception("you must sync all templates before run migrate")

                auth_template._data = policy._data
                auth_template.save(update_fields=["_data"])


class Migration(migrations.Migration):

    dependencies = [
        ("template", "0008_permtemplate_subject_count"),
    ]

    operations = [
        migrations.RunPython(migrate_old_templates),
    ]
